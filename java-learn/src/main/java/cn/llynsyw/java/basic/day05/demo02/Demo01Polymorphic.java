package cn.llynsyw.java.basic.day05.demo02;


/*
代码当中体现多态性，其实就是一句话：父类引用指向子类对象
格式：
父类名称 对象名=new 子类名称();
或者：
接口名称 对象=new 实现类名称()；

访问成员变量的两种方式：
1.直接通过对象名称访问成员变量，看等号 左边是谁，优先用谁，没有则向上找
2.间接通过成员变量方法访问，看该方法属于谁，优先用谁，没有则向上找

多态的使用好处：无论右边new的时候换成哪个子类对象，等号左边调用方法都不会变化


1.对象的向上转型，其实就是多态写法：
格式：
父类名称 对象名=new 子类名称();
含义：右侧创建一个子类对象，将该对象当作父类来看待
2.对象的向下转型，其实就是一个【还原】的动作
格式：子类名称 对象名=(子类名称)父类对象
含义：将父类对象，【还原】成为本来的子类对象

【注意】
1.向上转型一定是安全的，但是也有一个弊端：
对象一旦向上转型为父类，那么就无法调用子类原本特有的方法
2.向下转型可能会产生 ClassCastException 用关键字 instanceof 判断
如何才能知道一个父类引用的对象，本来是什么子类?
格式：
对象 instanceof 类名称
这将会得到一个boolean值结果，也即是判断前面的对象能不能当作后面类型的实例
 */
public class Demo01Polymorphic {
    public static void main(String[] args) {
        //左侧父类的引用，指向了右侧子类的对象
        Fu obj=new Zi();
        obj.method();


    }
}
