package cn.llynsyw.java.basic.day05.demo01;

/*
接口就是多个类的公共规范，不能有静态代码块、构造方法
接口是一种引用数据类型，最重要的内容就是其中的：抽象方法

如何定义一个接口的格式：
public interface 接口名称{
    //接口内容
}

备注：换成了关键字interface之后，编译生成的字节码文件仍然是： java--->.class

如果是Java.7,那么接口中可以包含的内容有:
1.常量
格式：
public static final 数据类型 常量名称=数据值;
注意:
一旦使用final关键字进行修饰，说明不可改变。

1接口当中的常量，可以省略public static final  效果一致
2.接口当中的常量，必须进行赋值，不能不赋值
3.接口中的常量名称，使用完全大写的字母，用下划线进行分隔,如NUM_1

2.抽象方法

如果是Java.8 还可以包含
3.默认方法
格式：
Public default 返回值类型 方法名称（参数列表){
    方法体
}
备注：接口当中的默认方法，可以解决接口升级的问题

4.静态方法
格式： public static 返回值类型 方法名称(参数列表}{
    方法体
}
使用：接口名称.静态方法();

如果是Java.9 还可额外包含：
5.私有方法
a.普通私有方法
    我们需要抽取一个公共方法，用来解决两个方法之间重复代码的问题。
    但是这个公共方法不应该让实现类使用，应该是私有的
格式：
private 返回值类型 方法名称(参数列表){
    方法体
}

b.静态私有方法：解决多个静态方法之间重复代码问题
格式：
private static 返回值类型 方法名称(参数列表){
    方法体
}



接口使用注意事项：
1.接口不能直接使用，必须有一个“实现类”来实现接口
格式：
public class 接口类+Impl   implements 接口名称{
    //...
    }
2.接口的实现类必须覆盖重写(实现)接口中的所有的抽象方法
3.创建实现类的对象，进行使用，或者可以直接通过  接口名.成员名 来使用接口中的静态成员
4.一个类的直接父类只能是一个，但是一个类的接口可以是多个
格式：
public class 接口实现类名 implements  接口1名称,接口2名称,..,接口n名称{
    //覆盖重写所有抽象方法
}
5.如果实现类并没有覆盖重写接口中所有的抽象方法，那么这个实现类自己就必须是抽象类
6.如果实现类所有抽象方法中有重复的，只需要重写一次即可
7.如果多个接口中有重复的默认方法，则必须要对该方法进行重写解决冲突
8.一个类如果直接父类当中的方法，和接口当中的默认方法产生了冲突，优先用父类当中的方法  继承优先于接口


【总结】
1.类与类的之间是单继承的，直接父类只能是一个
2.类与接口是多实现的，一个类可以实现多个接口
3.接口与接口之间可以是多继承的，一个接口可以继承多个接口

【注意】
1.多个父接口当中的抽象方法如果重复，没问题，因为只是一个方法名称
2.多个父接口当中的默认方法如果重复，那么子接口必须覆盖重写该默认方法而且带有 default关键字

 */
public class Demo01Interface {
    public static void main(String[] args) {
        MyInterfaceAbsImpl impl=new MyInterfaceAbsImpl();
        impl.method1();
        impl.method2();
        impl.method3();
        impl.method4();
        MyInterfaceAbs.methodStatic();
    }

}
